#!/usr/bin/env python3

import libspn as spn
from enum import Enum
import matplotlib.pyplot as plt


class Dataset(Enum):
    IMAGE = 0
    MNIST = 1
    CIFAR10 = 2


class Writer(Enum):
    IMAGE = 0


class SpnData(spn.App):

    __logger = spn.get_logger()
    __info = __logger.info

    def __init__(self):
        super().__init__("Data processing")

    def _define_read_args(self, parser):
        parser.add_argument('dataset', type=str,
                            choices=[i.name.lower() for i in Dataset],
                            help="dataset to use")
        parser.add_argument('path', type=str, nargs='?',
                            help="path to the input data; "
                            "a folder, a glob, or a coma-separated list of files "
                            "see specific dataset docs for details; no path is "
                            "needed for MNIST")

        data_params = parser.add_argument_group(title="data parameters")
        data_params.add_argument('--classes', type=str, default=None,
                                 help="coma-separated list of labels of classes to use; "
                                 "if not provided, all classes will be used")
        data_params.add_argument('--num-epochs', type=int, default=1,
                                 help="number of epochs of produced data")
        data_params.add_argument('--batch-size', type=int, default=100,
                                 help="size of a batch when processing data")
        data_params.add_argument('--num-threads', type=int, default=1,
                                 help="number of threads enqueuing the data queue.")
        data_params.add_argument('--shuffle', type=spn.App.bool_arg, default=False,
                                 help="shuffle the data every epoch")
        data_params.add_argument('--min-after-dequeue', type=int, default=None,
                                 help="min number of elements in the data queue "
                                 "after each dequeue used for shuffling; not used "
                                 "for image or mnist datasets")
        data_params.add_argument('--seed', type=int, default=None,
                                 help="seed used for shuffling")

        image_params = parser.add_argument_group(title="image data parameters")
        image_params.add_argument('--image-format', type=str, default='float',
                                  choices=[i.name.lower() for i in spn.ImageFormat],
                                  help="image format")
        image_params.add_argument('--ratio', type=int, default=1,
                                  help="downsample images by the given ratio")
        image_params.add_argument('--crop', type=int, default=0,
                                  help="crop image border pixels")
        image_params.add_argument('--accurate', type=spn.App.bool_arg, default=True,
                                  help="more accurate JPEG decompression")

        mnist_cifar_params = parser.add_argument_group(
            title="MNIST/CIFAR data parameters")
        mnist_cifar_params.add_argument('--mnist-subset', type=str, default='all',
                                        choices=[i.name.lower()
                                                 for i in spn.MNISTDataset.Subset],
                                        help="subset to use")
        mnist_cifar_params.add_argument('--cifar-subset', type=str, default='all',
                                        choices=[i.name.lower()
                                                 for i in spn.CIFAR10Dataset.Subset],
                                        help="subset to use")

    def _define_write_args(self, parser):
        parser.add_argument('writer', type=str,
                            choices=[i.name.lower() for i in Writer],
                            help="writer to use")
        parser.add_argument('path', type=str,
                            help="a path to the output file(s); "
                            "for images, might contain %%n for image number and "
                            "%%l for image label; see specific writer docs for details")

    def _define_visualize_args(self, parser):
        pass

    def define_args(self, parser, commands):
        self._define_read_args(
            commands.add_parser('read', app=self,
                                help='read data from a dataset'))
        self._define_write_args(
            commands.add_parser('write', app=self,
                                help='write data using a writer'))
        self._define_visualize_args(
            commands.add_parser('visualize', app=self,
                                help='visualize data'))

    def process_args(self, parser, args):
        if not args.read:
            parser.error("read command must be used")

        ##########################
        # Read command
        ##########################
        # Positional
        args.read.dataset = Dataset[args.read.dataset.upper()]
        if args.read.dataset is not Dataset.MNIST and args.read.path is None:
            parser.error("PATH is needed for this dataset")
        # Data
        if args.read.classes is not None:
            args.read.classes = [i.strip() for i in
                                 args.read.classes.split(',')]
        args.read.image_format = spn.ImageFormat[args.read.image_format.upper()]
        if args.read.ratio < 1:
            parser.error("RATIO must be >=1")
        if args.read.crop < 0:
            parser.error("CROP cannot be negative")
        args.read.mnist_subset = spn.MNISTDataset.Subset[args.read.mnist_subset.upper()]
        args.read.cifar_subset = spn.CIFAR10Dataset.Subset[args.read.cifar_subset.upper()]

        ##########################
        # Write command
        ##########################
        if args.write is not None:
            args.write.writer = Writer[args.write.writer.upper()]

    def run(self, args):
        # Create dataset
        if args.read.dataset == Dataset.MNIST:
            dataset = spn.MNISTDataset(subset=args.read.mnist_subset,
                                       format=args.read.image_format,
                                       num_epochs=args.read.num_epochs,
                                       batch_size=args.read.batch_size,
                                       shuffle=args.read.shuffle,
                                       ratio=args.read.ratio,
                                       crop=args.read.crop,
                                       num_threads=args.read.num_threads,
                                       allow_smaller_final_batch=True,
                                       classes=args.read.classes,
                                       seed=args.read.seed)
        elif args.read.dataset == Dataset.IMAGE:
            dataset = spn.ImageDataset(image_files=args.read.path,
                                       format=args.read.image_format,
                                       num_epochs=args.read.num_epochs,
                                       batch_size=args.read.batch_size,
                                       shuffle=args.read.shuffle,
                                       ratio=args.read.ratio,
                                       crop=args.read.crop,
                                       accurate=args.read.accurate,
                                       num_threads=args.read.num_threads,
                                       allow_smaller_final_batch=True,
                                       classes=args.read.classes,
                                       seed=args.read.seed)
        elif args.read.dataset == Dataset.CIFAR10:
            dataset = spn.CIFAR10Dataset(data_dir=args.read.path,
                                         subset=args.read.cifar_subset,
                                         format=args.read.image_format,
                                         num_epochs=args.read.num_epochs,
                                         batch_size=args.read.batch_size,
                                         shuffle=args.read.shuffle,
                                         ratio=args.read.ratio,
                                         crop=args.read.crop,
                                         min_after_dequque=args.read.min_after_dequque,
                                         num_threads=args.read.num_threads,
                                         allow_smaller_final_batch=True,
                                         classes=args.read.classes,
                                         seed=args.read.seed)
        # Write data
        if args.write:
            # Create writer
            if args.write.writer == Writer.IMAGE:
                writer = spn.ImageDataWriter(args.write.path, dataset.shape,
                                             # All image formats besides BINARY
                                             # should already be normalized
                                             normalize=True)

            # Write all
            dataset.write_all(writer)

        # Visualize data (beta)
        if args.visualize:
            # Get data
            data = dataset.get_data()

            # Setup figure
            plt.ion()
            plt.show()
            fig = plt.gcf()

            # Setup event listening
            def on_key(event):
                if event.key == "escape":
                    done[0] = True
                pause[0] = False
            fig.canvas.mpl_connect('key_press_event', on_key)

            # Loop through images
            done = [False]
            batch_nr = 0
            with spn.session() as (sess, run):
                while run() and not done[0]:
                    batch_nr += 1
                    out = sess.run(data)
                    self.__info("Displaying batch %i" % batch_nr)

                    # Currently, we only visualize images
                    for i in range(out[0].shape[0]):
                        pause = [True]
                        spn.show_image(out[0][i], shape=dataset.shape,
                                       # All image formats besides BINARY
                                       # should already be normalized
                                       normalize=True)
                        # Pause & clear
                        while pause[0]:
                            fig.canvas.get_tk_widget().update()  # process events
                        plt.cla()
                        if done[0]:
                            break


if __name__ == '__main__':
    app = SpnData()
    app.main()
