#!/usr/bin/env python3

import libspn as spn
from enum import Enum
import numpy as np


class Dataset(Enum):
    IMAGES = 0
    MNIST = 1


class SpnData(spn.App):

    def __init__(self):
        super().__init__("Data processing")

    def define_args(self, parser):
        parser.add_argument('dataset', type=str,
                            choices=[i.name.lower() for i in Dataset],
                            help="dataset to use")
        parser.add_argument('in_path', type=str,
                            help="path to the input data; "
                            "a folder, a glob, or a coma-separated list of files")
        parser.add_argument('out_path', type=str,
                            help="a path to the output file(s); "
                            "for images, might contain %%n for image number and "
                            "%%l for image label")

        processing_params = parser.add_argument_group(title="processing")
        processing_params.add_argument('--num_epochs', type=int, default='1',
                                       help="number of epochs of produced data")
        processing_params.add_argument('--batch_size', type=int, default='100',
                                       help="size of a batch when processing data")
        processing_params.add_argument('--num_threads', type=int, default='1',
                                       help="number of threads enqueuing the data queue.")
        processing_params.add_argument('--shuffle', action='store_true',
                                       help="shuffle the data")
        processing_params.add_argument('--seed', type=str, default=None,
                                       help="seed used for shuffling")

        image_params = parser.add_argument_group(title="images")
        image_params.add_argument('--image-format', type=str, default='float',
                                  choices=[i.name.lower()
                                           for i in spn.ImageFormat],
                                  help="image format")
        image_params.add_argument('--ratio', type=int, default=1,
                                  help="downsample images by the given ratio (1, 2, 4 or 8)")
        image_params.add_argument('--crop', type=int, default=0,
                                  help="crop image border pixels")
        image_params.add_argument('--normalize', action='store_true',
                                  help="normalize images to have zero mean and unit norm")

        # MNIST
        mnist_params = parser.add_argument_group(title="MNIST")
        mnist_params.add_argument('--mnist-subset', type=str, default='all',
                                  choices=[i.name.lower()
                                           for i in spn.MnistDataset.Subset],
                                  help="subset to use")
        mnist_params.add_argument('--mnist-classes', type=str, default=None,
                                  help="coma-separated list of digits; if specified, "
                                  "only the listed classes will be provided")

    def process_args(self):
        if self.args.crop < 0:
            self.error("CROP cannot be negative")
        if self.args.ratio < 1:
            self.error("RATIO must be >=1")
        self.args.dataset = Dataset[self.args.dataset.upper()]
        self.args.image_format = spn.ImageFormat[self.args.image_format.upper()]
        self.args.mnist_subset = spn.MnistDataset.Subset[self.args.mnist_subset.upper()]
        if self.args.mnist_classes is not None:
            try:
                self.args.mnist_classes = set([int(i) for i in
                                               self.args.mnist_classes.split(',')])
            except ValueError:
                self.error("Incorrect mnist_classes '%s'" % self.args.mnist_classes)

    def run(self):
        # Create dataset
        if self.args.dataset == Dataset.MNIST:
            dataset = spn.MnistDataset(data_dir=self.args.in_path,
                                       subset=self.args.mnist_subset,
                                       format=self.args.image_format,
                                       num_epochs=self.args.num_epochs,
                                       batch_size=self.args.batch_size,
                                       shuffle=self.args.shuffle,
                                       ratio=self.args.ratio,
                                       crop=self.args.crop,
                                       num_threads=self.args.num_threads,
                                       allow_smaller_final_batch=True,
                                       classes=self.args.mnist_classes,
                                       seed=self.args.seed)
        elif self.args.dataset == Dataset.IMAGES:
            # Try discovering orig image sizes from the first image
            dataset = spn.ImageDataset(image_files=self.args.in_path,
                                       format=self.args.image_format,
                                       num_epochs=self.args.num_epochs,
                                       batch_size=self.args.batch_size,
                                       shuffle=self.args.shuffle,
                                       ratio=self.args.ratio,
                                       crop=self.args.crop,
                                       num_threads=self.args.num_threads,
                                       allow_smaller_final_batch=True,
                                       seed=self.args.seed)

        # Create writer
        if self.args.dataset in {Dataset.MNIST, Dataset.IMAGES}:
            writer = spn.ImageDataWriter(self.args.out_path, dataset.shape,
                                         # All image formats besides BINARY
                                         # should already be normalized
                                         normalize=True)

        # Run session
        data = dataset.get_data()
        with spn.session() as (sess, run):
            i = 0
            while run():
                i += 1
                samples, labels = sess.run(data)
                batch_size = samples.shape[0]
                self.print2("=> Batch %d of size %d" % (i, batch_size))
                if self.logger.root.level <= spn.DEBUG1:
                    self.debug1("Batch dtype:%s max_min:%s min_max:%s" %
                                (samples.dtype,
                                 np.amax(np.amin(samples, axis=1)),
                                 np.amin(np.amax(samples, axis=1))))
                writer.write(samples, labels=labels)


if __name__ == '__main__':
    app = SpnData()
    app.main()
