#!/usr/bin/env python3

import libspn as spn
from collections import namedtuple
from enum import Enum
import argparse


class Dataset(Enum):
    IMAGES = 0
    MNIST = 1


class Model(Enum):
    DENSE = 0


class SpnModel(spn.App):

    TrainParams = namedtuple('TrainParams', ['model', 'dataset'])

    def __init__(self):
        super().__init__("Model")

    def define_args(self, parser, commands):
        ##########################
        # Train command
        ##########################
        train_parser = commands.add_parser('train', help='train a model',
                                           formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        train_parser.add_argument('model', type=str,
                                  choices=[i.name.lower() for i in Model],
                                  help="model to train")
        train_parser.add_argument('dataset', type=str,
                                  choices=[i.name.lower() for i in Dataset],
                                  help="training dataset to use")
        train_parser.add_argument('path', type=str,
                                  help="path to the training data; "
                                  "a folder, a glob, or a coma-separated list of files")
        train_parser.add_argument('--num_epochs', type=int, default='1',
                                  help="number of training epochs")
        train_parser.add_argument('--batch_size', type=int, default='100',
                                  help="size of a batch used for training")
        train_parser.add_argument('--num_threads', type=int, default='1',
                                  help="number of threads enqueuing the data queue.")
        train_parser.add_argument('--shuffle', action='store_true',
                                  help="shuffle the data every epoch")
        train_parser.add_argument('--seed', type=str, default=None,
                                  help="seed used for shuffling")

        image_params = train_parser.add_argument_group(title="images")
        image_params.add_argument('--image-format', type=str, default='float',
                                  choices=[i.name.lower()
                                           for i in spn.ImageFormat],
                                  help="image format")
        image_params.add_argument('--ratio', type=int, default=1,
                                  help="downsample images by the given ratio")
        image_params.add_argument('--crop', type=int, default=0,
                                  help="crop image border pixels")

        mnist_params = train_parser.add_argument_group(title="MNIST")
        mnist_params.add_argument('--mnist-subset', type=str, default='all',
                                  choices=[i.name.lower()
                                           for i in spn.MnistDataset.Subset],
                                  help="subset to use")
        mnist_params.add_argument('--mnist-classes', type=str, default=None,
                                  help="coma-separated list of digits; if specified, "
                                  "only the listed classes will be provided")

        ##########################
        # Load command
        ##########################
        load_parser = commands.add_parser('load', help='load a model',
                                          formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        load_parser.add_argument('path', type=str,
                                 help="path to the model")

        ##########################
        # MPE command
        ##########################
        mpe_parser = commands.add_parser('mpe', help='get mpe state of data variables',
                                         formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    def process_args(self):
        if self.args.train is None and self.args.load is None:
            self.error("either train or load command must be used")
        self.args.train.model = Model[self.args.train.model.upper()]
        self.args.train.dataset = Dataset[self.args.train.dataset.upper()]
        if self.args.train.crop < 0:
            self.error("CROP cannot be negative")
        if self.args.train.ratio < 1:
            self.error("RATIO must be >=1")
        self.args.train.image_format = spn.ImageFormat[self.args.train.image_format.upper()]
        self.args.train.mnist_subset = spn.MnistDataset.Subset[self.args.train.mnist_subset.upper()]
        if self.args.train.mnist_classes is not None:
            try:
                self.args.train.mnist_classes = set([int(i) for i in
                                                     self.args.train.mnist_classes.split(',')])
            except ValueError:
                self.error("Incorrect mnist_classes '%s'" % self.args.train.mnist_classes)

    def run(self):
        ##########################
        # Train command
        ##########################
        if self.args.train is not None:
            # Create dataset
            if self.args.train.dataset == Dataset.MNIST:
                dataset = spn.MnistDataset(data_dir=self.args.train.path,
                                           subset=self.args.train.mnist_subset,
                                           format=self.args.train.image_format,
                                           num_epochs=self.args.train.num_epochs,
                                           batch_size=self.args.train.batch_size,
                                           shuffle=self.args.train.shuffle,
                                           ratio=self.args.train.ratio,
                                           crop=self.args.train.crop,
                                           num_threads=self.args.train.num_threads,
                                           allow_smaller_final_batch=True,
                                           classes=self.args.train.mnist_classes,
                                           seed=self.args.train.seed)
            elif self.args.train.dataset == Dataset.IMAGE:
                dataset = spn.ImageDataset(image_files=self.args.train.path,
                                           format=self.args.train.image_format,
                                           num_epochs=self.args.train.num_epochs,
                                           batch_size=self.args.train.batch_size,
                                           shuffle=self.args.train.shuffle,
                                           ratio=self.args.train.ratio,
                                           crop=self.args.train.crop,
                                           num_threads=self.args.train.num_threads,
                                           allow_smaller_final_batch=True,
                                           seed=self.args.train.seed)
            # Create model
            if self.args.train.model == Model.DENSE:
                model = spn.DenseModel()

            # Train
            model.train()

        ##########################
        # MPE command
        ##########################
        if self.args.mpe is not None:
            pass


if __name__ == '__main__':
    app = SpnModel()
    app.main()
